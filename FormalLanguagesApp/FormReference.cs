using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace FormalLanguagesApp
{
    public partial class FormReference : Form
    {
        public FormReference()
        {
            InitializeComponent();
        }

        Dictionary<string, string> references = new Dictionary<string, string>();

        const string about_program = "Данная программа позволяет " +
            "задавать праволинейную порождающую грамматику " +
            "и превращать её в недетерминированный конечный автомат.";

        const string grammar = "Грамматика (в данной программе исключительно праволинейная)" +
            " - это струкрута которая позволяет создавать цепочки посредством манипулирования" +
            " символами (терминалами и нетерминалами) входящими в алфавит. \n" +
            "Структура грамматики следующая:\n" +
            " G=(T,N,P,S)\n" +
            "где T - список терминалов грамматики\n" +
            "N - список нетерминалов грамматики\n" +
            "P - набор правил грамматики\n" +
            "S - стартовый символ грамматики\n" +
            "Все терминалы являются значимыми символами, а все нетерминалы - незначимые. Из нетерминалов исходят правила " +
            "благодаря которым строятся цепочки (слова).\n" +
            "Грамматика может содержать пустой символ '`'. Он является терминалом.";

        const string add_terminal = "Для того чтобы добавить терминал в грамматику" +
            "достаточно нажать правой кнопкой мыши по области грамматики и нажать" +
            " 'Добавить терминал' или в верхней части программы выбрать пункт меню " +
            "'Грамматика' и в появившемся списке нажать 'Добавить терминал'. После этого " +
            "появится окно с возможностью ввода символа. Введите любой символ который " +
            "вы хотите добавить в грамматику как терминал, кроме символов ' ','`' и нельзя добавить" +
            " пустую строку. После ввода нажмите кнопку 'Добавить терминал'. После этого вы " +
            "вернётесь обратно в программу и указанный символ добавится в грамматику.";

        const string add_nonterminal = "Для того чтобы добавить нетерминал в грамматику" +
      "достаточно нажать правой кнопкой мыши по области грамматики и нажать" +
      " 'Добавить нетерминал' или в верхней части программы выбрать пункт меню " +
      "'Грамматика' и в появившемся списке нажать 'Добавить нетерминал'. После этого " +
      "появится окно с возможностью ввода символа. Введите любой символ который " +
      "вы хотите добавить в грамматику как нетерминал, кроме символов ' ','`' и нельзя добавить" +
      " пустую строку. После ввода нажмите кнопку 'Добавить нетерминал'. После этого вы " +
      "вернётесь обратно в программу и указанный символ добавится в грамматику.";

        const string set_start_symbol = "Для установки стартового символа достаточно " +
            "нажать правой кнопкой мыши по области грамматики и нажать" +
            " 'Установить стартовый нетерминал' или в верхней части программы выбрать пункт меню" +
            " 'Грамматика' и в появившемся списке нажать 'Установить стартовый нетерминал'." +
            " В появившемся окне нажмите на стрелочку у поля ввода и выберите присутствующий в грамматике " +
            "нетерминал, или напишите любой другой символ (кроме символов ' ','`' и нельзя добавить пустую строку) " +
            "который не содержится в грамматике, " +
            "таким образом вы его добавите в грамматику и он сразу станет стартовым.";

        const string add_rule = "Для добавления правила в грамматику, сначала требуется" +
            "добавить хотя бы по одному терминалу и нетерминалу. Далее нажимаем правой " +
            "кнопкой мыши по области грамматики и выбираем в появившемся списке пункт " +
            "'Добавить правило', или в верхнем правом углу программы выбираем пункт меню " +
            "'Грамматика' и в появившемся списке выбираем пункт 'Добавить правило'. " +
            "После этого на отобразившемся окне нам надо в каждом поле ввода выбрать " +
            "символы которые будут присутствовать в правиле. Левое поле ввода предназначено " +
            "для нетерминала из которого исходит правило. Среднее поле ввода предназначено для " +
            "терминала. А правое поле ввода требуется для нетерминала.\n" +
            "Таким образом добавление правила позволяет добавить правило вида 'A->aA' в грамматику." +
            "\n Для добавления пустого правила достаточно очистить правое поле ввода, а " +
            "в среднем поле выбрать символ '`'. Этот символ зарезервирован в программе так как" +
            "он является пустым символом грамматики.";

        const string delete_rule = "Для удаления правила из грамматики, сначала требуется" +
            " добавить хотя бы по одному терминалу и нетерминалу. Далее нажимаем правой " +
            "кнопкой мыши по области грамматики и выбираем в появившемся списке пункт " +
            "'Удалить правило', или в верхнем правом углу программы выбираем пункт меню " +
            "'Грамматика' и в появившемся списке выбираем пункт 'Удалить правило'. " +
            "После этого на отобразившемся окне нам надо выбрать в поле ввода " +
            "по нажатию на стрелочку какое правило следует удалить. После нажатия на кнопку" +
            " 'Удалить правило', из грамматики исчезнет указанное правило.";

        const string update_rule = "Для изменения правила грамматики, сначала требуется" +
            " добавить хотя бы по одно правило. Далее нажимаем правой кнопкой мыши по области грамматики " +
            "и выбираем в появившемся списке пункт 'Изменить правило', или в верхнем правом углу программы выбираем пункт меню " +
            "'Грамматика' и в появившемся списке выбираем пункт 'Изменить правило'. " +
            "После этого в отобразившемся окне, в верхнем поле надо выбрать правило которое мы хотим " +
            " изменить, а в нижних трёх полях отобразятся составные части этого правила. " +
            "Благодаря этим полям можно изменить символы правила, выбрав нужные вам терминалы и нетерминалы. " +
            "Для принятия изменений нужно нажать кнопку 'Изменить правило'. После этого в грамматике " +
            "изменится указанное правило.";

        const string delete_terminal = "Для удаления терминала из грамматики, сначала требуется" +
            " добавить хотя бы по один терминал. Далее нажимаем правой кнопкой мыши по области грамматики " +
            "и выбираем в появившемся списке пункт 'Удалить терминал', или в верхнем правом углу программы выбираем пункт меню " +
            "'Грамматика' и в появившемся списке выбираем пункт 'Удалить терминал'. " +
            "После этого в отобразившемся окне, в поле нужно выбрать нажав на стрелочку " +
            "один из терминалов который присутствует в грамматике. Для принятия удаления нужно " +
            "нажать на кнопку 'Удалить терминал'. После этого терминал исчезнет из грамматики.\n" +
            "ВНИМАНИЕ!\n" +
            "При удалении терминала из грамматики, удалятся и все правила которые содержат данный терминал.";

        const string delete_nonterminal = "Для удаления нетерминала из грамматики, сначала требуется" +
            " добавить хотя бы по один нетерминал. Далее нажимаем правой кнопкой мыши по области грамматики " +
            "и выбираем в появившемся списке пункт 'Удалить нетерминал', или в верхнем правом углу программы выбираем пункт меню " +
            "'Грамматика' и в появившемся списке выбираем пункт 'Удалить нетерминал'. " +
            "После этого в отобразившемся окне, в поле нужно выбрать нажав на стрелочку " +
            "один из нетерминалов который присутствует в грамматике. Для принятия удаления нужно " +
            "нажать на кнопку 'Удалить нетерминал'. После этого нетерминал исчезнет из грамматики.\n" +
            "ВНИМАНИЕ!\n" +
            "При удалении нетерминала из грамматики, удалятся и все правила которые содержат данный нетерминал.";

        const string nda = "Недетерминированный конечный автомат (НКА) – абстрактная машина, которая читает символы из вводимого слова и решает, допустить или отвергнуть это слово." +
            " В нашем случае он выглядит следующим образом: \n" +
            "M = (Q, A, q0, T, F)\n" +
            "где Q - конечное множество состояний автомата,\n" +
            "A - конечный алфавит,\n" +
            "q0 - начальное состояние автомата,\n" +
            "T - функция переходов конечного автомата,\n" +
            "F - множество заключительных состояний.\n";

        const string grammar_to_nda = "Для перевода грамматики в конечный автомат сначала " +
            "требуется добавить по одному терминалу и нетерминалу, установить начальный нетерминал " +
            ", а также добавить хотя бы одно правило. После этого для превращения в грамматики в автомат " +
            "достаточно нажать кнопку со стрелкой которая находится между областью грамматики и областью " +
            "конечного автомата. После нажатия данной кнопки в области автомата отобразиться сама " +
            "структура автомата. Для приведения праволинейной грамматики к автомату используется алгоритм " +
            "приведения праволинейной грамматики к недетерминированному конечному автомату, а потому другие " +
            "варианты грамматик в нашем случае не подойдут.";

        private void FormReference_Load(object sender, EventArgs e)
        {
            references.Add("nodeAboutProgram",about_program);
            references.Add("nodeGrammar",grammar);
            references.Add("nodeAddTerminal", add_terminal);
            references.Add("nodeAddNonTerminal", add_nonterminal);
            references.Add("nodeAddRule", add_rule);
            references.Add("nodeDeleteRule", delete_rule);
            references.Add("nodeUpdateRule", update_rule);
            references.Add("nodeDeleteTerminal", delete_terminal);
            references.Add("nodeDeleteNonTerminal", delete_nonterminal);
            references.Add("nodeSetStartSymbol", set_start_symbol);
            references.Add("nodeStateMachine", nda);
            references.Add("nodeFromGrammarToNDA", grammar_to_nda);
            treeViewReference.SelectedNode = treeViewReference.Nodes[0];
        }

        private void treeViewReference_AfterSelect(object sender, TreeViewEventArgs e)
        {
            richTextBoxReference.Text = references[treeViewReference.SelectedNode.Name];
        }
    }
}
